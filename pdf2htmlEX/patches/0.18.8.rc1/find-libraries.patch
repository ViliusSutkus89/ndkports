--- pdf2htmlEX/CMakeLists.txt	2023-11-14 03:32:25.260000000 +0200
+++ pdf2htmlEX/CMakeLists.txt	2023-11-15 02:28:10.440000000 +0200
@@ -23,90 +23,23 @@
 
 find_package(PkgConfig)
 
-
-# SINCE we have a very intimate relationship with a particular version of 
-# poppler... we explicitly describe the poppler include and library 
-# paths.
-#
-include_directories(
-  ../poppler/build/poppler
-  ../poppler/build
-  ../poppler/poppler
-  ../poppler
-)
-#
-# The following order is critical as the glib functions use functions 
-# located in the main poppler library 
-#
-set(POPPLER_LIBRARIES ${POPPLER_LIBRARIES}
-  ${CMAKE_SOURCE_DIR}/../poppler/build/glib/libpoppler-glib.a
-  ${CMAKE_SOURCE_DIR}/../poppler/build/libpoppler.a
-)
-
+pkg_search_module(POPPLER-GLIB REQUIRED IMPORTED_TARGET poppler-glib=0.89.0)
+pkg_search_module(POPPLER REQUIRED IMPORTED_TARGET poppler=0.89.0)
+set(PDF2HTMLEX_LIBS ${PDF2HTMLEX_LIBS} PkgConfig::POPPLER-GLIB PkgConfig::POPPLER)
 
 if(ENABLE_SVG)
-    pkg_check_modules(CAIRO REQUIRED cairo>=1.10.0)
-    message("-- Trying to locate cairo-svg...")
-    find_path(CAIRO_SVG_INCLUDE_PATH cairo-svg.h PATHS ${CAIRO_INCLUDE_DIRS} NO_DEFAULT_PATH)
-    if(CAIRO_SVG_INCLUDE_PATH)
-        message("--    found cairo-svg...")
-        include_directories(${CAIRO_INCLUDE_DIRS})
-        if(NOT DEFINED ENV{USING_BREW})
-            link_directories(${CAIRO_LIBRARY_DIRS})
-            set(PDF2HTMLEX_LIBS ${PDF2HTMLEX_LIBS} ${CAIRO_LIBRARIES})
-        endif()
-        set(ENABLE_SVG 1)
-    else()
-        message(FATAL_ERROR "Error: no SVG support found in Cairo")
-    endif()
-
-    find_package(Freetype REQUIRED)
-    include_directories(${FREETYPE_INCLUDE_DIRS})
-    link_directories(${FREETYPE_LIBRARY_DIRS})
-#    set(PDF2HTMLEX_LIBS ${PDF2HTMLEX_LIBS} ${FREETYPE_LIBRARIES})
-endif()
+    pkg_search_module(CAIRO_SVG REQUIRED IMPORTED_TARGET cairo-svg)
+    set(PDF2HTMLEX_LIBS ${PDF2HTMLEX_LIBS} PkgConfig::CAIRO_SVG)
+
+    set(ENABLE_SVG 1)
 
-# SINCE we have a very intimate relationship with a particular version of 
-# fontforge... we explicitly describe the fontforge include and library 
-# paths.
-#
-include_directories(
-  ../fontforge/fontforge
-  ../fontforge
-  ../fontforge/build/inc
-  ../fontforge/inc
-)
-#
-include_directories(${FONTFORGE_INCLUDE_DIRS})
-link_directories(${FONTFORGE_LIBRARY_DIRS})
-set(FONTFORGE_LIBRARIES ${FONTFORGE_LIBRARIES}
-  ${CMAKE_SOURCE_DIR}/../fontforge/build/lib/libfontforge.a
-)
-
-# If we are using Alpine Linux then we need to add -lintl
-#
-if (EXISTS /usr/lib/libintl.so ) 
-  set(LIB_INTL_LIBRARIES -lintl )
-else ()
-  set(LIB_INTL_LIBRARIES "" )
+    pkg_search_module(FREETYPE REQUIRED IMPORTED_TARGET freetype2)
+    set(PDF2HTMLEX_LIBS ${PDF2HTMLEX_LIBS} PkgConfig::FREETYPE)
 endif()
 
-set(PDF2HTMLEX_LIBS ${PDF2HTMLEX_LIBS}
-  ${POPPLER_LIBRARIES}
-  ${FONTFORGE_LIBRARIES}
-  ${LIB_INTL_LIBRARIES}
-  ${CAIRO_LIBRARIES}
-  -ljpeg
-  -lpng
-  -lfontconfig
-  -lfreetype
-  -lxml2
-  -lglib-2.0
-  -lgio-2.0
-  -pthread
-  -lz
-  -lm
-)
+pkg_search_module(FONTFORGE REQUIRED IMPORTED_TARGET libfontforge=20200314)
+set(PDF2HTMLEX_LIBS ${PDF2HTMLEX_LIBS} PkgConfig::FONTFORGE)
+include_directories(${FONTFORGE_INCLUDEDIR}/private)
 
 # debug build flags (overwrite default cmake debug flags)
 set(CMAKE_C_FLAGS_DEBUG "-ggdb -pg")
