--- pdf2htmlEX/CMakeLists.txt	2023-11-15 02:31:58.159000000 +0200
+++ pdf2htmlEX/CMakeLists.txt	2023-11-04 11:02:15.884000000 +0200
@@ -50,37 +50,16 @@
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Woverloaded-virtual")

-# clang compiler need c++11 flag
-#if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
-#  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
-#endif()
-
-# CYGWIN or GCC 4.5.x bug
-if(CYGWIN)
-# was: set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++0x")
-# the following change is untested:
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++14")
-else()
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -pthread")
+set(THREADS_PREFER_PTHREAD_FLAG ON)
+find_package(Threads REQUIRED)
+set(PDF2HTMLEX_LIBS ${PDF2HTMLEX_LIBS} Threads::Threads)
+
+set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+if(NOT CYGWIN)
+    set(CMAKE_CXX_EXTENSIONS OFF)
 endif()

-# check the C++11 features we need
-include(CheckCXXSourceCompiles)
-check_cxx_source_compiles("
-#include <vector>
-int main()
-{
-  char * ptr = nullptr;
-  std::vector<int> v;
-  auto f = [&](){ for(auto & i : v) ++i; };
-  f();
-}
-" CXX0X_SUPPORT)
-if(NOT CXX0X_SUPPORT)
-    message(FATAL_ERROR "Error: your compiler does not support C++0x/C++11, please update it.")
-endif()
-
-
 configure_file (${CMAKE_SOURCE_DIR}/src/pdf2htmlEX-config.h.in ${CMAKE_SOURCE_DIR}/src/pdf2htmlEX-config.h)
 configure_file (${CMAKE_SOURCE_DIR}/pdf2htmlEX.1.in ${CMAKE_SOURCE_DIR}/pdf2htmlEX.1)

@@ -90,7 +71,6 @@

 set(PDF2HTMLEX_SRC ${PDF2HTMLEX_SRC}
     src/Param.h
-    src/pdf2htmlEX.cc
     src/pdf2htmlEX-config.h
     src/HTMLRenderer/HTMLRenderer.h
     src/HTMLRenderer/draw.cc
@@ -149,8 +129,11 @@
     src/TmpFiles.cc
     )

-add_executable(pdf2htmlEX ${PDF2HTMLEX_SRC})
-target_link_libraries(pdf2htmlEX ${PDF2HTMLEX_LIBS})
+set(libPDF2HTMLEX_SRC src/libpdf2htmlEX.cc ${PDF2HTMLEX_SRC} src/pdf2htmlEX.h)
+add_library(libpdf2htmlEX ${libPDF2HTMLEX_SRC})
+target_link_libraries(libpdf2htmlEX ${PDF2HTMLEX_LIBS})
+set_target_properties(libpdf2htmlEX PROPERTIES PUBLIC_HEADER "src/pdf2htmlEX.h")
+set_target_properties(libpdf2htmlEX PROPERTIES OUTPUT_NAME pdf2htmlEX)

 add_custom_target(pdf2htmlEX_resources ALL DEPENDS
     ${CMAKE_SOURCE_DIR}/share/base.min.css
@@ -175,7 +158,14 @@
         ${CMAKE_SOURCE_DIR}/share/fancy.css
     )
 
-install (TARGETS pdf2htmlEX DESTINATION bin)
+install (TARGETS libpdf2htmlEX
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  PUBLIC_HEADER DESTINATION include
+  )
+
+configure_file(${CMAKE_CURRENT_LIST_DIR}/pdf2htmlEX.pc.in ${CMAKE_CURRENT_BINARY_DIR}/pdf2htmlEX.pc @ONLY)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/pdf2htmlEX.pc DESTINATION lib/pkgconfig)
 
 set(PDF2HTMLEX_RESOURCE
     ${CMAKE_SOURCE_DIR}/3rdparty/PDF.js/compatibility.js
new file mode 100644
--- /dev/null
+++ pdf2htmlEX/pdf2htmlEX.pc.in
@@ -0,0 +1,11 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+libdir=${prefix}/lib
+includedir=${prefix}/include
+
+Name: @PROJECT_NAME@
+Description: @PROJECT_NAME@
+Version: @PDF2HTMLEX_VERSION@
+
+Requires.private: cairo-svg freetype2 libfontforge poppler
+Libs: -L${libdir} -lpdf2htmlEX
+Cflags: -I${includedir}
\ No newline at end of file
new file mode 100644
--- /dev/null
+++ pdf2htmlEX/src/libpdf2htmlEX.cc
@@ -0,0 +1,662 @@
+/*
+ * libpdf2htmlEX.cc
+ *
+ * Copyright (C) 2012-2015 Lu Wang <coolwanglu@gmail.com>
+ * Copyright (C) 2020 Vilius Sutkus'89 <ViliusSutkus89@gmail.com>
+ *
+ * pdf2htmlEX is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+#include <cstdlib>
+#include <cstddef>
+#include <cstring>
+#include <string>
+#include <limits>
+#include <iostream>
+#include <memory>
+#include <cerrno>
+
+#include <poppler-config.h>
+#include <goo/GooString.h>
+
+#include <PDFDoc.h>
+#include <PDFDocFactory.h>
+#include <GlobalParams.h>
+
+#include "pdf2htmlEX-config.h"
+
+#include "pdf2htmlEX.h"
+#include "Param.h"
+#include "HTMLRenderer/HTMLRenderer.h"
+
+#include "util/path.h"
+#include "util/ffw.h"
+
+#ifdef __MINGW32__
+#include "util/mingw.h"
+#endif
+
+#include "poppler/ErrorCodes.h"
+
+namespace pdf2htmlEX {
+
+  pdf2htmlEX::pdf2htmlEX() : param(std::make_unique<Param>()) {
+#if defined(__MINGW32__)
+    param->data_dir = get_exec_dir(".");
+    param->tmp_dir  = get_tmp_dir();
+#else
+    char const *tmp = getenv("TMPDIR");
+
+#ifdef P_tmpdir
+    if (!tmp)
+      tmp = P_tmpdir;
+#endif
+
+#ifdef _PATH_TMP
+    if (!tmp)
+        tmp = _PATH_TMP;
+#endif
+    if (!tmp)
+      tmp = "/tmp";
+
+    param->tmp_dir = tmp;
+    param->data_dir = PDF2HTMLEX_DATA_PATH;
+#endif
+
+    m_tmpDirWithoutSuffix = param->tmp_dir;
+    initParam();
+  }
+
+  // Dtor needed, because Param is forward declared in the header
+  pdf2htmlEX::~pdf2htmlEX() = default;
+
+  /* class GlobalParamsGC {
+  private:
+    GlobalParams *m_savedCopy;
+    std::unique_ptr<GlobalParams> m_globalParams;
+  public:
+    GlobalParamsGC(const char *popplerDataDir) {
+      m_savedCopy = globalParams;
+      m_globalParams = std::make_unique<GlobalParams>(popplerDataDir);
+      globalParams = m_globalParams.get();
+    }
+
+    ~GlobalParamsGC() {
+      globalParams = m_savedCopy;
+    }
+  }; */
+
+  void pdf2htmlEX::convert() {
+    checkParam();
+
+    prepareDirectories();
+
+    if (param->debug)
+      std::cerr << "temporary dir: " << (param->tmp_dir) << std::endl;
+
+    create_directories(param->dest_dir);
+
+    // read poppler config file
+    globalParams = std::make_unique<GlobalParams>(
+      !param->poppler_data_dir.empty() ? param->poppler_data_dir.c_str() : NULL
+    );
+    //GlobalParamsGC gp(!param->poppler_data_dir.empty() ? param->poppler_data_dir.c_str() : nullptr);
+
+    // open PDF file
+    std::unique_ptr<GooString> ownerPW;
+    if (!param->owner_password.empty()) {
+      ownerPW = std::make_unique<GooString>(param->owner_password);
+    }
+
+    std::unique_ptr<GooString> userPW;
+    if (!param->user_password.empty()) {
+      userPW = std::make_unique<GooString>(param->user_password);
+    }
+
+    GooString fileName(param->input_filename);
+
+    std::unique_ptr<PDFDoc> doc(PDFDocFactory().createPDFDoc(fileName, ownerPW.get(), userPW.get()));
+
+    if (!doc->isOk()) {
+      int errCode = doc->getErrorCode();
+      if (errCode == errEncrypted) {
+        throw EncryptionPasswordException(std::to_string(errCode));
+      } else {
+        throw ConversionFailedException(std::to_string(errCode));
+      }
+    }
+
+    if (!doc->okToCopy()) {
+      if (param->no_drm == 0) {
+        throw DocumentCopyProtectedException("");
+      }
+      std::cerr << "Document has copy-protection bit set." << std::endl;
+    }
+
+    param->first_page = std::min<int>(std::max<int>(param->first_page, 1), doc->getNumPages());
+    param->last_page = std::min<int>(std::max<int>(param->last_page, param->first_page), doc->getNumPages());
+
+    HTMLRenderer(nullptr, *param).process(doc.get());
+    globalParams.reset();
+  }
+
+  void pdf2htmlEX::checkParam() {
+    if (param->input_filename.empty()) {
+      throw ConversionFailedException("Input filename not specified!");
+    }
+
+    if (param->output_filename.empty()) {
+      const std::string s = get_filename(param->input_filename);
+      if (get_suffix(param->input_filename) == ".pdf") {
+        param->output_filename = s.substr(0, s.size() - 4) + ".html";
+      } else {
+        param->output_filename = s + ".html";
+      }
+    }
+
+    if (param->page_filename.empty()) {
+      const std::string s = get_filename(param->input_filename);
+      if (get_suffix(param->input_filename) == ".pdf") {
+        param->page_filename = s.substr(0, s.size() - 4) + "%d.page";
+      } else {
+        param->page_filename = s + "%d.page";
+      }
+      sanitize_filename(param->page_filename);
+    } else {
+      // Need to make sure we have a page number placeholder in the filename
+      if (!sanitize_filename(param->page_filename)) {
+        // Inject the placeholder just before the file extension
+        const std::string suffix = get_suffix(param->page_filename);
+        param->page_filename =
+          param->page_filename.substr(0, param->page_filename.size() - suffix.size()) + "%d" + suffix;
+        sanitize_filename(param->page_filename);
+      }
+    }
+
+    if (param->css_filename.empty()) {
+      const std::string s = get_filename(param->input_filename);
+      if (get_suffix(param->input_filename) == ".pdf") {
+        param->css_filename = s.substr(0, s.size() - 4) + ".css";
+      } else {
+        param->css_filename = s + ".css";
+      }
+    }
+
+    if (param->outline_filename.empty()) {
+      const std::string s = get_filename(param->input_filename);
+
+      if (get_suffix(param->input_filename) == ".pdf") {
+        param->outline_filename = s.substr(0, s.size() - 4) + ".outline";
+      } else {
+        if (!param->split_pages)
+          param->outline_filename = s + ".outline";
+      }
+    }
+
+    if (false) {}
+#ifdef ENABLE_LIBPNG
+    else if (param->bg_format == "png") {}
+#endif
+#ifdef ENABLE_LIBJPEG
+    else if (param->bg_format == "jpg") {}
+#endif
+#if ENABLE_SVG
+    else if (param->bg_format == "svg") {}
+#endif
+    else {
+      throw ConversionFailedException(std::string("Image format not supported: ") + param->bg_format);
+    }
+
+#if not ENABLE_SVG
+    if (param->process_type3) {
+      throw ConversionFailedException("process-type3 is enabled, however SVG support is not built in this version of pdf2htmlEX.");
+    }
+#endif
+
+    if ((param->font_format == "ttf") && (param->external_hint_tool == "")) {
+      std::cerr
+        << "Warning: No hint tool is specified for truetype fonts, the result may be rendered poorly in some circumstances."
+        << std::endl;
+    }
+
+    if (param->embed_image && (param->bg_format == "svg") && !param->svg_embed_bitmap) {
+      std::cerr
+        << "Warning: --svg-embed-bitmap is forced on because --embed-image is on, or the dumped bitmaps can't be loaded."
+        << std::endl;
+      param->svg_embed_bitmap = 1;
+    }
+  }
+
+  class CStringFreeNotDeleteGC {
+  public:
+    char *m_data;
+
+    CStringFreeNotDeleteGC(const std::string &data) {
+      m_data = strdup(data.c_str());
+    }
+
+    ~CStringFreeNotDeleteGC() {
+      free(m_data);
+    };
+  };
+
+  void pdf2htmlEX::prepareDirectories() {
+    CStringFreeNotDeleteGC pBuf(m_tmpDirWithoutSuffix + "/pdf2htmlEX-XXXXXX");
+    errno = 0;
+    if (nullptr == mkdtemp(pBuf.m_data)) {
+      throw ConversionFailedException(std::string("Cannot create temp directory: ") + strerror(errno));
+    }
+    param->tmp_dir = pBuf.m_data;
+  }
+
+  class ParamDefaultValueSetter {
+  public:
+    template<class T, class Tv>
+    ParamDefaultValueSetter &add(const char *optname, T *location, const Tv &default_value, const char *description,
+                                 bool dont_show_default = false) {
+      *location = default_value;
+      return *this;
+    }
+  };
+
+  void pdf2htmlEX::initParam() {
+    ParamDefaultValueSetter()
+      // pages
+      .add("first-page,f", &param->first_page, 1, "first page to convert")
+      .add("last-page,l", &param->last_page, std::numeric_limits<int>::max(), "last page to convert")
+
+        // dimensions
+      .add("zoom", &param->zoom, 0, "zoom ratio", true)
+      .add("fit-width", &param->fit_width, 0, "fit width to <fp> pixels", true)
+      .add("fit-height", &param->fit_height, 0, "fit height to <fp> pixels", true)
+      .add("use-cropbox", &param->use_cropbox, 1, "use CropBox instead of MediaBox")
+      .add("dpi", &param->desired_dpi, 144.0, "Resolution for graphics in DPI")
+
+        // output files
+//      .add("embed", "specify which elements should be embedded into output", embed_parser, true)
+      .add("embed-css", &param->embed_css, 1, "embed CSS files into output")
+      .add("embed-font", &param->embed_font, 1, "embed font files into output")
+      .add("embed-image", &param->embed_image, 1, "embed image files into output")
+      .add("embed-javascript", &param->embed_javascript, 1, "embed JavaScript files into output")
+      .add("embed-outline", &param->embed_outline, 1, "embed outlines into output")
+      .add("split-pages", &param->split_pages, 0, "split pages into separate files")
+      .add("dest-dir", &param->dest_dir, ".", "specify destination directory")
+      .add("css-filename", &param->css_filename, "", "filename of the generated css file")
+      .add("page-filename", &param->page_filename, "", "filename template for split pages ")
+      .add("outline-filename", &param->outline_filename, "", "filename of the generated outline file")
+      .add("process-nontext", &param->process_nontext, 1, "render graphics in addition to text")
+      .add("process-outline", &param->process_outline, 1, "show outline in HTML")
+      .add("process-annotation", &param->process_annotation, 0, "show annotation in HTML")
+      .add("process-form", &param->process_form, 0, "include text fields and radio buttons")
+      .add("printing", &param->printing, 1, "enable printing support")
+      .add("fallback", &param->fallback, 0, "output in fallback mode")
+      .add("tmp-file-size-limit", &param->tmp_file_size_limit, -1,
+           "Maximum size (in KB) used by temporary files, -1 for no limit")
+
+        // fonts
+      .add("embed-external-font", &param->embed_external_font, 1, "embed local match for external fonts")
+      .add("font-format", &param->font_format, "woff", "suffix for embedded font files (ttf,otf,woff,svg)")
+      .add("decompose-ligature", &param->decompose_ligature, 0, "decompose ligatures, such as \uFB01 -> fi")
+      .add("turn-off-ligatures", &param->turn_off_ligatures, 0, "explicitly tell browsers not to use ligatures")
+      .add("auto-hint", &param->auto_hint, 0, "use fontforge autohint on fonts without hints")
+      .add("external-hint-tool", &param->external_hint_tool, "",
+           "external tool for hinting fonts (overrides --auto-hint)")
+      .add("stretch-narrow-glyph", &param->stretch_narrow_glyph, 0, "stretch narrow glyphs instead of padding them")
+      .add("squeeze-wide-glyph", &param->squeeze_wide_glyph, 1, "shrink wide glyphs instead of truncating them")
+      .add("override-fstype", &param->override_fstype, 0, "clear the fstype bits in TTF/OTF fonts")
+      .add("process-type3", &param->process_type3, 0, "convert Type 3 fonts for web (experimental)")
+
+        // text
+      .add("heps", &param->h_eps, 1.0, "horizontal threshold for merging text, in pixels")
+      .add("veps", &param->v_eps, 1.0, "vertical threshold for merging text, in pixels")
+      .add("space-threshold", &param->space_threshold, (1.0 / 8), "word break threshold (threshold * em)")
+      .add("font-size-multiplier", &param->font_size_multiplier, 4.0,
+           "a value greater than 1 increases the rendering accuracy")
+      .add("space-as-offset", &param->space_as_offset, 0, "treat space characters as offsets")
+      .add("tounicode", &param->tounicode, 0, "how to handle ToUnicode CMaps (0=auto, 1=force, -1=ignore)")
+      .add("optimize-text", &param->optimize_text, 0, "try to reduce the number of HTML elements used for text")
+      .add("correct-text-visibility", &param->correct_text_visibility, 1,
+           "0: Don't do text visibility checks. 1: Fully occluded text handled. 2: Partially occluded text handled")
+      .add("covered-text-dpi", &param->text_dpi, 300,
+           "Rendering DPI to use if correct-text-visibility == 2 and there is partially covered text on the page")
+
+        // background image
+      .add("bg-format", &param->bg_format, "png", "specify background image format")
+      .add("svg-node-count-limit", &param->svg_node_count_limit, -1,
+           "if node count in a svg background image exceeds this limit,"
+           " fall back this page to bitmap background; negative value means no limit")
+      .add("svg-embed-bitmap", &param->svg_embed_bitmap, 1,
+           "1: embed bitmaps in svg background; 0: dump bitmaps to external files if possible")
+
+        // encryption
+      .add("owner-password,o", &param->owner_password, "", "owner password (for encrypted files)", true)
+      .add("user-password,u", &param->user_password, "", "user password (for encrypted files)", true)
+      .add("no-drm", &param->no_drm, 0, "override document DRM settings")
+
+        // misc.
+      .add("clean-tmp", &param->clean_tmp, 1, "remove temporary files after conversion")
+      .add("tmp-dir", &param->tmp_dir, param->tmp_dir, "specify the location of temporary directory")
+      .add("data-dir", &param->data_dir, param->data_dir, "specify data directory")
+      .add("poppler-data-dir", &param->poppler_data_dir, param->poppler_data_dir, "specify poppler data directory")
+      .add("debug", &param->debug, 0, "print debugging information")
+      .add("proof", &param->proof, 0, "texts are drawn on both text layer and background for proof")
+      .add("quiet", &param->quiet, 0, "perform operations quietly")
+
+        // meta
+//      .add("version,v", "print copyright and version info", &show_version_and_exit)
+//      .add("help,h", "print usage information", &show_usage_and_exit)
+
+      .add("", &param->input_filename, "", "")
+      .add("", &param->output_filename, "", "");
+  };
+
+
+  pdf2htmlEX &pdf2htmlEX::setInputFilename(const std::string &inputFilename) {
+    param->input_filename = inputFilename;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setOutputFilename(const std::string &outputFilename) {
+    param->output_filename = outputFilename;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setFirstPage(int firstPage) {
+    param->first_page = firstPage;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setLastPage(int lastPage) {
+    param->last_page = lastPage;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setZoomRatio(double zoomRatio) {
+    param->zoom = zoomRatio;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setFitWidth(double fitWidth) {
+    param->fit_width = fitWidth;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setFitHeight(double fitHeight) {
+    param->fit_height = fitHeight;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setUseCropBox(bool useCropBox) {
+    param->use_cropbox = useCropBox;
+    return *this;
+
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setDPI(double desiredDPI) {
+    param->desired_dpi = desiredDPI;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setEmbedCSS(bool embedCSS) {
+    param->embed_css = embedCSS;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setEmbedFont(bool embedFont) {
+    param->embed_font = embedFont;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setEmbedImage(bool embedImage) {
+    param->embed_image = embedImage;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setEmbedJavascript(bool embedJavascript) {
+    param->embed_javascript = embedJavascript;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setEmbedOutline(bool embedOutline) {
+    param->embed_outline = embedOutline;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setSplitPages(bool split_pages) {
+    param->split_pages = split_pages;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setDestinationDir(const std::string &destinationDir) {
+    param->dest_dir = destinationDir;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setCSSFilename(const std::string &cssFilename) {
+    param->css_filename = cssFilename;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setPageFilename(const std::string &pageFilename) {
+    param->page_filename = pageFilename;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setOutlineFilename(const std::string &outlineFilename) {
+    param->outline_filename = outlineFilename;
+    return *this;
+  }
+
+  //render graphics in addition to text
+  pdf2htmlEX &pdf2htmlEX::setProcessNonText(bool processNonText) {
+    param->process_nontext = processNonText;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setProcessOutline(bool processOutline) {
+    param->process_outline = processOutline;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setProcessAnnotation(bool processAnnotation) {
+    param->process_annotation = processAnnotation;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setProcessForm(bool processForm) {
+    param->process_form = processForm;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setPrinting(bool printing) {
+    param->printing = printing;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setFallback(bool fallback) {
+    param->fallback = fallback;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setTmpFileSizeLimit(int tmpFileSizeLimit) {
+    param->tmp_file_size_limit = tmpFileSizeLimit;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setEmbedExternalFont(bool embedExternalFont) {
+    param->embed_external_font = embedExternalFont;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setFontFormat(const std::string &fontFormat) {
+    param->font_format = fontFormat;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setDecomposeLigature(bool decomposeLigature) {
+    param->decompose_ligature = decomposeLigature;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setTurnOffLigatures(bool turnOffLigatures) {
+    param->turn_off_ligatures = turnOffLigatures;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setAutoHint(bool autoHint) {
+    param->auto_hint = autoHint;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setExternalHintTool(const std::string &externalHintTool) {
+    param->external_hint_tool = externalHintTool;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setStretchNarrowGlyph(bool stretchNarrowGlyph) {
+    param->stretch_narrow_glyph = stretchNarrowGlyph;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setSqueezeWideGlyph(bool squeezeWideGlyph) {
+    param->squeeze_wide_glyph = squeezeWideGlyph;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setOverrideFstype(bool overrideFSType) {
+    param->override_fstype = overrideFSType;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setProcessType3(bool processType3) {
+    param->process_type3 = processType3;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setHorizontalEpsilon(double horizontalEpsilon) {
+    param->h_eps = horizontalEpsilon;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setVEpsilon(double verticalEpsilon) {
+    param->v_eps = verticalEpsilon;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setSpaceThreshold(double spaceThreshold) {
+    param->space_threshold = spaceThreshold;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setFontSizeMultiplier(double fontSizeMultiplier) {
+    param->font_size_multiplier = fontSizeMultiplier;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setSpaceAsOffset(bool spaceAsOffset) {
+    param->space_as_offset = spaceAsOffset;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setToUnicode(int toUnicode) {
+    param->tounicode = toUnicode;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setOptimizeText(bool optimizeText) {
+    param->optimize_text = optimizeText;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setCorrectTextVisibility(int correctTextVisibility) {
+    param->correct_text_visibility = correctTextVisibility;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setCoveredTextDPI(double coveredTextDPI) {
+    param->text_dpi = coveredTextDPI;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setBackgroundImageFormat(const std::string &backgroundImageFormat) {
+    param->bg_format = backgroundImageFormat;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setSVGNodeCountLimit(int SVGNodeCountLimit) {
+    param->svg_node_count_limit = SVGNodeCountLimit;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setSVGEmbedBitmap(int SVGEmbedBitmap) {
+    param->svg_embed_bitmap = SVGEmbedBitmap;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setOwnerPassword(const std::string &ownerPassword) {
+    param->owner_password = ownerPassword;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setUserPassword(const std::string &userPassword) {
+    param->user_password = userPassword;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setDRM(bool enableDRM) {
+    param->no_drm = !enableDRM;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setCleanTMPAfterConversion(bool cleanTMP) {
+    param->clean_tmp = cleanTMP;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setTMPDir(const std::string &TMPDir) {
+    param->tmp_dir = TMPDir;
+    m_tmpDirWithoutSuffix = TMPDir;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setDataDir(const std::string &dataDir) {
+    param->data_dir = dataDir;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setPopplerDataDir(const std::string &popplerDataDir) {
+    param->poppler_data_dir = popplerDataDir;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setDebug(bool debug) {
+    param->debug = debug;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setProof(bool proof) {
+    param->proof = proof;
+    return *this;
+  }
+
+  pdf2htmlEX &pdf2htmlEX::setQuiet(bool quiet) {
+    param->quiet = quiet;
+    return *this;
+  }
+
+  ConversionFailedException::~ConversionFailedException() = default;
+  DocumentCopyProtectedException::~DocumentCopyProtectedException() = default;
+  EncryptionPasswordException::~EncryptionPasswordException() = default;
+
+} // namespace pdf2htmlEX
\ No newline at end of file
new file mode 100644
--- /dev/null
+++ pdf2htmlEX/src/pdf2htmlEX.h
@@ -0,0 +1,200 @@
+/*
+ * pdf2htmlEX.h
+ *
+ * Copyright (C) 2012-2015 Lu Wang <coolwanglu@gmail.com>
+ * Copyright (C) 2020 Vilius Sutkus'89 <ViliusSutkus89@gmail.com>
+ *
+ * pdf2htmlEX is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+#pragma once
+
+#include <string>
+#include <exception>
+#include <memory>
+
+namespace pdf2htmlEX {
+
+  class Param;
+
+  class pdf2htmlEX {
+  private:
+    std::unique_ptr<Param> param;
+    std::string m_tmpDirWithoutSuffix;
+
+    void initParam();
+    void checkParam();
+
+    void prepareDirectories();
+
+  public:
+    pdf2htmlEX();
+
+    virtual ~pdf2htmlEX();
+
+    void convert();
+
+    pdf2htmlEX &setInputFilename(const std::string &inputFilename);
+
+    pdf2htmlEX &setOutputFilename(const std::string &outputFilename);
+
+    pdf2htmlEX &setFirstPage(int firstPage);
+
+    pdf2htmlEX &setLastPage(int lastPage);
+
+    pdf2htmlEX &setZoomRatio(double zoomRatio);
+
+    pdf2htmlEX &setFitWidth(double fitWidth);
+
+    pdf2htmlEX &setFitHeight(double fitHeight);
+
+    pdf2htmlEX &setUseCropBox(bool useCropBox);
+
+    pdf2htmlEX &setDPI(double desiredDPI);
+
+    pdf2htmlEX &setEmbedCSS(bool embedCSS);
+
+    pdf2htmlEX &setEmbedFont(bool embedFont);
+
+    pdf2htmlEX &setEmbedImage(bool embedImage);
+
+    pdf2htmlEX &setEmbedJavascript(bool embedJavascript);
+
+    pdf2htmlEX &setEmbedOutline(bool embedOutline);
+
+    pdf2htmlEX &setSplitPages(bool split_pages);
+
+    pdf2htmlEX &setDestinationDir(const std::string &destinationDir);
+
+    pdf2htmlEX &setCSSFilename(const std::string &cssFilename);
+
+    pdf2htmlEX &setPageFilename(const std::string &pageFilename);
+
+    pdf2htmlEX &setOutlineFilename(const std::string &outlineFilename);
+
+    //render graphics in addition to text
+    pdf2htmlEX &setProcessNonText(bool processNonText);
+
+    pdf2htmlEX &setProcessOutline(bool processOutline);
+
+    pdf2htmlEX &setProcessAnnotation(bool processAnnotation);
+
+    pdf2htmlEX &setProcessForm(bool processForm);
+
+    pdf2htmlEX &setPrinting(bool printing);
+
+    pdf2htmlEX &setFallback(bool fallback);
+
+    pdf2htmlEX &setTmpFileSizeLimit(int tmpFileSizeLimit);
+
+    pdf2htmlEX &setEmbedExternalFont(bool embedExternalFont);
+
+    pdf2htmlEX &setFontFormat(const std::string &fontFormat = "woff");
+
+    pdf2htmlEX &setDecomposeLigature(bool decomposeLigature);
+
+    pdf2htmlEX &setTurnOffLigatures(bool turnOffLigatures);
+
+    pdf2htmlEX &setAutoHint(bool autoHint);
+
+    //external tool for hinting fonts (overrides --auto-hint)
+    pdf2htmlEX &setExternalHintTool(const std::string &externalHintTool);
+
+    //stretch narrow glyphs instead of padding them
+    pdf2htmlEX &setStretchNarrowGlyph(bool stretchNarrowGlyph);
+
+    //shrink wide glyphs instead of truncating them
+    pdf2htmlEX &setSqueezeWideGlyph(bool squeezeWideGlyph);
+
+    //clear the fstype bits in TTF/OTF fonts
+    pdf2htmlEX &setOverrideFstype(bool overrideFSType);
+
+    //convert Type 3 fonts for web (experimental)
+    pdf2htmlEX &setProcessType3(bool processType3);
+
+    pdf2htmlEX &setHorizontalEpsilon(double horizontalEpsilon);
+
+    pdf2htmlEX &setVEpsilon(double verticalEpsilon);
+
+    pdf2htmlEX &setSpaceThreshold(double spaceThreshold);
+
+    pdf2htmlEX &setFontSizeMultiplier(double fontSizeMultiplier);
+
+    pdf2htmlEX &setSpaceAsOffset(bool spaceAsOffset);
+
+    // how to handle ToUnicode CMaps (0=auto, 1=force, -1=ignore)
+    pdf2htmlEX &setToUnicode(int toUnicode);
+
+    // try to reduce the number of HTML elements used for text
+    pdf2htmlEX &setOptimizeText(bool optimizeText);
+
+    // 0: Don't do text visibility checks.
+    // 1: Fully occluded text handled.
+    // 2: Partially occluded text handled
+    pdf2htmlEX &setCorrectTextVisibility(int correctTextVisibility);
+
+    // Rendering DPI to use if correctTextVisibility == 2 and there is partially covered text on the page
+    pdf2htmlEX &setCoveredTextDPI(double coveredTextDPI);
+
+    pdf2htmlEX &setBackgroundImageFormat(const std::string &backgroundImageFormat = "png");
+
+    // if node count in a svg background image exceeds this limit,
+    // fall back this page to bitmap background; negative value means no limit
+    pdf2htmlEX &setSVGNodeCountLimit(int SVGNodeCountLimit);
+
+    // 1: embed bitmaps in svg background;
+    // 0: dump bitmaps to external files if possible
+    pdf2htmlEX &setSVGEmbedBitmap(int SVGEmbedBitmap);
+
+    pdf2htmlEX &setOwnerPassword(const std::string &ownerPassword);
+
+    pdf2htmlEX &setUserPassword(const std::string &userPassword);
+
+    pdf2htmlEX &setDRM(bool enableDRM);
+
+    pdf2htmlEX &setCleanTMPAfterConversion(bool cleanTMP);
+
+    pdf2htmlEX &setTMPDir(const std::string &TMPDir);
+
+    pdf2htmlEX &setDataDir(const std::string &dataDir);
+
+    pdf2htmlEX &setPopplerDataDir(const std::string &popplerDataDir);
+
+    pdf2htmlEX &setDebug(bool debug);
+
+    // texts are drawn on both text layer and background for proof
+    pdf2htmlEX &setProof(bool proof);
+
+    pdf2htmlEX &setQuiet(bool quiet);
+  };
+
+  class ConversionFailedException : public std::runtime_error {
+  public:
+    using std::runtime_error::runtime_error;
+    virtual ~ConversionFailedException();
+  };
+
+  class DocumentCopyProtectedException : public ConversionFailedException {
+  public:
+    using ConversionFailedException::ConversionFailedException;
+    virtual ~DocumentCopyProtectedException();
+  };
+
+  class EncryptionPasswordException : public ConversionFailedException {
+  public:
+    using ConversionFailedException::ConversionFailedException;
+    virtual ~EncryptionPasswordException();
+  };
+
+} // namespace pdf2htmlEX
\ No newline at end of file
